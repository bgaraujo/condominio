{"version":3,"sources":["midia/foto6.jpg","midia sync /^/.//wa.*/.gif$","midia/wa1.gif","midia/wa2.gif","midia/wa3.gif","midia/wa4.gif","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","style","header","img","width","marginTop","height","overflow","App","className","src","logo","name","action","starttedAt","link","obj","key","dateString","date","Date","getDate","getMonth","getFullYear","now","past","diff","Math","abs","getTime","ceil","waiting","require","href","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,mC,0FCA3C,IAAIC,EAAM,CACT,YAAa,GACb,YAAa,GACb,YAAa,GACb,YAAa,IAId,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBN,EAAOC,QAAUE,EACjBA,EAAeE,GAAK,I,gBCzBpBL,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,+FC2ErCc,G,YAAQ,CACZC,OAAO,CACLC,IAAI,CACFC,MAAM,OACNC,UAAW,QAEbD,MAAO,OACPE,OAAQ,QACRC,SAAS,aAIEC,EAlFH,WAmCV,OACE,yBAAKC,UAAU,QACb,4BAAQA,UAAU,SAASR,MAAOA,EAAMC,QACtC,yBAAKD,MAAOA,EAAMC,OAAOC,IAAKO,IAAKC,OAErC,yBAAKF,UAAU,UACb,0CACA,4BAzCU,CACd,CACEG,KAAK,4BACLC,OAAO,8BACPC,WAAW,aACXC,KAAK,sEAEP,CACEH,KAAK,yCACLC,OAAO,sBACPC,WAAW,YACXC,KAAK,sEAEP,CACEH,KAAK,6BACLC,OAAO,qCACPC,WAAW,aACXC,KAAK,uEA0BS3B,KAAI,SAAC4B,EAAIC,GAAL,OACV,wBAAIR,UAAU,OAAOQ,IAAKA,GACxB,yBAAKR,UAAU,eACb,mCAASQ,EAAI,IAEf,yBAAKR,UAAU,eACb,uCAAY,2BAAIO,EAAIJ,OACpB,uCAAY,2BA7Bf,SAACM,GACZ,IAAIC,EAAO,IAAIC,KAAKF,GACpB,OAAOC,EAAKE,UAAU,KAAKF,EAAKG,WAAW,GAAG,IAAIH,EAAKI,cA2BzBJ,CAAKH,EAAIF,cACzB,8CAAa,2BAAIE,EAAIH,UAEvB,yBAAKJ,UAAU,eACb,+BA7BA,SAACS,GACf,IAAMM,EAAM,IAAIJ,KACVK,EAAO,IAAIL,KAAKF,GAChBQ,EAAOC,KAAKC,IAAIJ,EAAIK,UAAYJ,EAAKI,WAG3C,MAAO,aAFMF,KAAKG,KAAKJ,EAAI,OAEE,mBAuBPK,CAAQf,EAAIF,aACpB,yBAAKJ,IAAKsB,MAAQ,QAAcf,EAAI,GAAG,WAEzC,yBAAKR,UAAU,eACb,+BAAO,uBAAGwB,KAAMjB,EAAID,KAAMmB,OAAO,UAA1B,uBCpDLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e0860822.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/foto6.de4dcd7a.jpg\";","var map = {\n\t\"./wa1.gif\": 13,\n\t\"./wa2.gif\": 14,\n\t\"./wa3.gif\": 15,\n\t\"./wa4.gif\": 16\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 12;","module.exports = __webpack_public_path__ + \"static/media/wa1.47cc5144.gif\";","module.exports = __webpack_public_path__ + \"static/media/wa2.1fcfebeb.gif\";","module.exports = __webpack_public_path__ + \"static/media/wa3.7f84fb0b.gif\";","module.exports = __webpack_public_path__ + \"static/media/wa4.fa0b3cf6.gif\";","import React from 'react';\nimport logo from './midia/foto6.jpg';\nimport './App.css';\nimport 'gridlex'\n\nconst App = () => {\n  const pending = [\n    {\n      name:'vidro hall t-7 danificado',\n      action:'trocar o vidro de uma porta',\n      starttedAt:'2019-12-01',\n      link:'https://drive.google.com/open?id=1n-P0vZSmp0HOX3YVtU_P7i_GFUcFF4p5'\n    },\n    {\n      name:'implantação de segurança 100%',\n      action:'seguir o cronograma',\n      starttedAt:'2019-7-31',\n      link:'https://drive.google.com/open?id=1JAwAvOR4kUPsKzFeu0CWbr-kTZBCzTb2'\n    },\n    {\n      name:'grelhas das churrasqueiras',\n      action:'Trocar as custas de quem danificou',\n      starttedAt:'2018-12-28',\n      link:'https://drive.google.com/open?id=1nVJq-AVzrEXFu7CWcxxKF7hxsixE2Qzr'\n    },\n  ]\n\n  const date = (dateString) => {\n    let date = new Date(dateString)\n    return date.getDate()+'/'+(date.getMonth()+1)+'/'+date.getFullYear()\n  }\n  const waiting = (dateString) => {\n    const now = new Date()\n    const past = new Date(dateString)\n    const diff = Math.abs(now.getTime() - past.getTime())\n    const days = Math.ceil(diff / (1000 * 60 * 60 * 24))\n    \n    return 'estamos a ' + days + ' dias no aguardo'\n  }\n\n  return (\n    <div className=\"grid\">\n      <header className=\"col-12\" style={style.header}>\n        <img style={style.header.img} src={logo}/>\n      </header>\n      <div className=\"col-12\">\n        <h1>Pendencias</h1>\n        <ul>\n          {\n            pending.map((obj,key)=>\n              <li className=\"grid\" key={key}>\n                <div className=\"col-2_sm-12\">\n                  <label>#{key+1}</label>\n                </div>\n                <div className=\"col-4_sm-12\">\n                  <label>item:<b>{obj.name}</b></label>\n                  <label>data:<b>{date(obj.starttedAt)}</b></label>\n                  <label>Ação: <b>{obj.action}</b></label>\n                </div>\n                <div className=\"col-4_sm-12\">\n                  <label>{waiting(obj.starttedAt)}</label>\n                  <img src={require('./midia/wa'+(key+1)+'.gif')}/>  \n                </div>\n                <div className=\"col-2_sm-12\">\n                  <label><a href={obj.link} target=\"_blank\">evidencia</a></label>\n                </div>\n              </li>\n            )\n          }\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nconst style = {\n  header:{\n    img:{\n      width:'100%',\n      marginTop: '-30%'\n    },\n    width: '100%',\n    height: '250px',\n    overflow:' hidden'\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}